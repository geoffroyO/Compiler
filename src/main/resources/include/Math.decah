// Grenoble INP - Ensimag projet GL -*- mode: java -*-
// Library for class Math of Deca, coded in Deca

// Equipe gl13
// Lucas MORIN | Jérémy NAVARRO | Majd ODEH | Geoffroy OUDOUMANESSAH | Sylvain POUGET
// VERSION 25/01/2020


// class that groups useful functions (floor, sqrt, bound...)


class Utility {

    float a1 = 3;
    float a1_2 = 1;
    float a1_3 = 4;
    float a2 = 15;
    float a3 = 92;
    float a4 = 65;
    float a5 = 35;
    float a6 = 89;
    float a7 = 79;
    float a8 = 32;
    float a9 = 38;
    float a10 = 46;
    float a11 = 26;
    float a12 = 43;
    float a13 = 38;


    float pi = 3.14159265358979323846264338;

    int floor(float x){
        int res = (int)(x / (2 * pi));
        return res;
    }

    void error() asm("ERROR");

    // Method to calculate the square root of a number
    float sqrt(float a){
        float x = 1;
        int n = 1000;

        if (a < 0.0) {
            println("The number given as parameter of sqrt() is negative");
            error();
        }

        while (n>=0){
            x = 0.5*(x+a/x);
            n = n - 1;
        }
        return x;
    }

    float bound(float x) asm("; Test Stack_overflow
                                TSTO #8
                                BOV stack_overflow
                                ADDSP #3
                                ; Saving the registers
                                PUSH R6
                                PUSH R5
                                PUSH R4
                                PUSH R3
                                PUSH R2
                                ; Test Stack_overflow
                                TSTO #2
                                BOV stack_overflow
                                ADDSP #2
                                LOAD -2(LB), R3
                                STORE R3, 0(SP)
                                LOAD -3(LB), R3
                                STORE R3, -1(SP)
                                LOAD 0(SP), R3
                                CMP #null, R3
                                BEQ dereferencement.null
                                LOAD 0(R3), R3
                                BSR 2(R3)
                                SUBSP #2
                                LOAD R0, R3
                                STORE R3, 1(LB)
                                LOAD -3(LB), R3
                                STORE R3, 2(LB)
                                LOAD 1(LB), R3
                                LOAD #2, R4
                                MUL R4, R3
                                BOV Float_overflow
                                STORE R3, 3(LB)
                                LEA 2(LB), R3
                                LOAD 2(LB), R4
                                LOAD 3(LB), R5
                                LOAD R5, R0
                                FLOAT R0, R5
                                LOAD -2(LB), R6
                                CMP #null, R6
                                BEQ dereferencement.null
                                LOAD 1(R6), R6
                                MUL R6, R5
                                BOV Float_overflow
                                SUB R5, R4
                                BOV Float_overflow
                                STORE R4, 0(R3)
                                LEA 2(LB), R3
                                LOAD 2(LB), R4
                                LOAD 3(LB), R5
                                LOAD R5, R0
                                FLOAT R0, R5
                                LOAD -2(LB), R7
                                CMP #null, R7
                                BEQ dereferencement.null
                                LOAD 2(R7), R7
                                MUL R7, R5
                                BOV Float_overflow
                                LOAD #0x1.99999ap-4, R6
                                MUL R6, R5
                                BOV Float_overflow
                                SUB R5, R4
                                BOV Float_overflow
                                STORE R4, 0(R3)
                                LEA 2(LB), R3
                                LOAD 2(LB), R4
                                LOAD 3(LB), R5
                                LOAD R5, R0
                                FLOAT R0, R5
                                LOAD -2(LB), R7
                                CMP #null, R7
                                BEQ dereferencement.null
                                LOAD 3(R7), R7
                                MUL R7, R5
                                BOV Float_overflow
                                LOAD #0x1.47ae14p-7, R6
                                FLOAT #-1, R0
                                MUL R0, R5
                                LOAD R4, R1
                                FMA R6, R5
                                STORE R5, 0(R3)
                                LEA 2(LB), R3
                                LOAD 2(LB), R4
                                LOAD 3(LB), R5
                                LOAD R5, R0
                                FLOAT R0, R5
                                LOAD -2(LB), R7
                                CMP #null, R7
                                BEQ dereferencement.null
                                LOAD 4(R7), R7
                                MUL R7, R5
                                BOV Float_overflow
                                LOAD #0x1.a36e2ep-14, R6
                                FLOAT #-1, R0
                                MUL R0, R5
                                LOAD R4, R1
                                FMA R6, R5
                                STORE R5, 0(R3)
                                LEA 2(LB), R3
                                LOAD 2(LB), R4
                                LOAD 3(LB), R5
                                LOAD R5, R0
                                FLOAT R0, R5
                                LOAD -2(LB), R7
                                CMP #null, R7
                                BEQ dereferencement.null
                                LOAD 5(R7), R7
                                MUL R7, R5
                                BOV Float_overflow
                                LOAD #0x1.0c6f7ap-20, R6
                                FLOAT #-1, R0
                                MUL R0, R5
                                LOAD R4, R1
                                FMA R6, R5
                                STORE R5, 0(R3)
                                LEA 2(LB), R3
                                LOAD 2(LB), R4
                                LOAD 3(LB), R5
                                LOAD R5, R0
                                FLOAT R0, R5
                                LOAD -2(LB), R7
                                CMP #null, R7
                                BEQ dereferencement.null
                                LOAD 6(R7), R7
                                MUL R7, R5
                                BOV Float_overflow
                                LOAD #0x1.5798eep-27, R6
                                FLOAT #-1, R0
                                MUL R0, R5
                                LOAD R4, R1
                                FMA R6, R5
                                STORE R5, 0(R3)
                                LEA 2(LB), R3
                                LOAD 2(LB), R4
                                LOAD 3(LB), R5
                                LOAD R5, R0
                                FLOAT R0, R5
                                LOAD -2(LB), R7
                                CMP #null, R7
                                BEQ dereferencement.null
                                LOAD 7(R7), R7
                                MUL R7, R5
                                BOV Float_overflow
                                LOAD #0x1.b7cdfep-34, R6
                                FLOAT #-1, R0
                                MUL R0, R5
                                LOAD R4, R1
                                FMA R6, R5
                                STORE R5, 0(R3)
                                LEA 2(LB), R3
                                LOAD 2(LB), R4
                                LOAD 3(LB), R5
                                LOAD R5, R0
                                FLOAT R0, R5
                                LOAD -2(LB), R7
                                CMP #null, R7
                                BEQ dereferencement.null
                                LOAD 8(R7), R7
                                MUL R7, R5
                                BOV Float_overflow
                                LOAD #0x1.197998p-40, R6
                                FLOAT #-1, R0
                                MUL R0, R5
                                LOAD R4, R1
                                FMA R6, R5
                                STORE R5, 0(R3)
                                LEA 2(LB), R3
                                LOAD 2(LB), R4
                                LOAD 3(LB), R5
                                LOAD R5, R0
                                FLOAT R0, R5
                                LOAD -2(LB), R7
                                CMP #null, R7
                                BEQ dereferencement.null
                                LOAD 9(R7), R7
                                MUL R7, R5
                                BOV Float_overflow
                                LOAD #0x1.6849b8p-47, R6
                                FLOAT #-1, R0
                                MUL R0, R5
                                LOAD R4, R1
                                FMA R6, R5
                                STORE R5, 0(R3)
                                LEA 2(LB), R3
                                LOAD 2(LB), R4
                                LOAD 3(LB), R5
                                LOAD R5, R0
                                FLOAT R0, R5
                                LOAD -2(LB), R7
                                CMP #null, R7
                                BEQ dereferencement.null
                                LOAD 10(R7), R7
                                MUL R7, R5
                                BOV Float_overflow
                                LOAD #0x1.cd2b2ap-54, R6
                                FLOAT #-1, R0
                                MUL R0, R5
                                LOAD R4, R1
                                FMA R6, R5
                                STORE R5, 0(R3)
                                LEA 2(LB), R3
                                LOAD 2(LB), R4
                                LOAD 3(LB), R5
                                LOAD R5, R0
                                FLOAT R0, R5
                                LOAD -2(LB), R7
                                CMP #null, R7
                                BEQ dereferencement.null
                                LOAD 11(R7), R7
                                MUL R7, R5
                                BOV Float_overflow
                                LOAD #0x1.2725dep-60, R6
                                FLOAT #-1, R0
                                MUL R0, R5
                                LOAD R4, R1
                                FMA R6, R5
                                STORE R5, 0(R3)
                                LEA 2(LB), R3
                                LOAD 2(LB), R4
                                LOAD 3(LB), R5
                                LOAD R5, R0
                                FLOAT R0, R5
                                LOAD -2(LB), R7
                                CMP #null, R7
                                BEQ dereferencement.null
                                LOAD 12(R7), R7
                                MUL R7, R5
                                BOV Float_overflow
                                LOAD #0x1.79ca1p-67, R6
                                FLOAT #-1, R0
                                MUL R0, R5
                                LOAD R4, R1
                                FMA R6, R5
                                STORE R5, 0(R3)
                                LEA 2(LB), R3
                                LOAD 2(LB), R4
                                LOAD 3(LB), R5
                                LOAD R5, R0
                                FLOAT R0, R5
                                LOAD -2(LB), R7
                                CMP #null, R7
                                BEQ dereferencement.null
                                LOAD 13(R7), R7
                                MUL R7, R5
                                BOV Float_overflow
                                LOAD #0x1.e39202p-74, R6
                                FLOAT #-1, R0
                                MUL R0, R5
                                LOAD R4, R1
                                FMA R6, R5
                                STORE R5, 0(R3)
                                LEA 2(LB), R3
                                LOAD 2(LB), R4
                                LOAD 3(LB), R5
                                LOAD R5, R0
                                FLOAT R0, R5
                                LOAD -2(LB), R7
                                CMP #null, R7
                                BEQ dereferencement.null
                                LOAD 14(R7), R7
                                MUL R7, R5
                                BOV Float_overflow
                                LOAD #0x1.357c2ap-80, R6
                                FLOAT #-1, R0
                                MUL R0, R5
                                LOAD R4, R1
                                FMA R6, R5
                                STORE R5, 0(R3)
                                LEA 2(LB), R3
                                LOAD 2(LB), R4
                                LOAD 3(LB), R5
                                LOAD R5, R0
                                FLOAT R0, R5
                                LOAD -2(LB), R7
                                CMP #null, R7
                                BEQ dereferencement.null
                                LOAD 15(R7), R7
                                MUL R7, R5
                                BOV Float_overflow
                                LOAD #0x1.8c240cp-87, R6
                                FLOAT #-1, R0
                                MUL R0, R5
                                LOAD R4, R1
                                FMA R6, R5
                                STORE R5, 0(R3)
                                if_bound_1:
                                LOAD 2(LB), R3
                                LOAD -2(LB), R4
                                LOAD 16(R4), R4
                                CMP R4, R3
                                SGT R3
                                CMP #1, R3
                                BNE end_if_bound_1
                                LEA 2(LB), R3
                                LOAD 2(LB), R4
                                LOAD #2, R5
                                LOAD R5, R0
                                FLOAT R0, R5
                                LOAD -2(LB), R6
                                LOAD 16(R6), R6
                                FLOAT #-1, R0
                                MUL R0, R5
                                LOAD R4, R1
                                FMA R6, R5
                                STORE R5, 0(R3)
                                end_if_bound_1:
                                if_bound_2:
                                LOAD 2(LB), R3
                                LOAD -2(LB), R4
                                LOAD 16(R4), R4
                                MUL #-0x1.0p0, R4
                                CMP R4, R3
                                SLT R3
                                CMP #1, R3
                                BNE end_if_bound_2
                                LEA 2(LB), R3
                                LOAD 2(LB), R4
                                LOAD #2, R5
                                LOAD R5, R0
                                FLOAT R0, R5
                                LOAD -2(LB), R6
                                LOAD 16(R6), R6
                                FLOAT #-1, R0
                                MUL R0, R5
                                LOAD R4, R1
                                FMA R6, R5
                                STORE R5, 0(R3)
                                end_if_bound_2:
                                LOAD 2(LB), R0
                                BRA End.Utility.bound_bis
                                End.Utility.bound_bis:
                                ; Restoring the registers
                                POP R2
                                POP R3
                                POP R4
                                POP R5
                                POP R6
                                SUBSP #3
                                RTS");

}


class Math {

	// sin function
    float sin(float x) {
    	Utility f = new Utility();
		float a1 = 1;
		float a3 = -0.166666666666667;
		float a5 = 0.00833333333333333;
		float a7 = -0.000198412698412698;
		float a9 = 0.00000275573192239859;
		float a11 = -0.0000000250521083854417;
		float a13 = 0.000000000160590438368216;
		float a15 = -0.000000000000764716373181982;
		float a17 = 0.00000000000000281145725434552;
		float a19 = -0.00000000000000000822063524662433;
		float a21 = 0.0000000000000000000195729410633913;
		float a23 =  - 0.0000000000000000000000386817017063068;
		float a25 =  0.0000000000000000000000000644695028438447;
		float a27 =  - 0.0000000000000000000000000000918368986379555;
		float a29 =  0.000000000000000000000000000000918368986379555;
		float a31 =  -0.000000000000000000000000000000000113099628864477;
		float a33 =  0.00000000000000000000000000000000000011516335620772;
		float a35 =  - 0.0000000000000000000000000000000000000000967759295863189;
		float z;
		float res;
		float tmp = x;

        if (tmp < 0){
            return -sin(-x);
        }
		if (tmp > f.pi){
			tmp = f.bound(x);
		}

		if (tmp < -(f.pi)){
			tmp = f.bound(x);
		}

		z = tmp*tmp;
        res = tmp*(a1+z*(a3+z*(a5+z*(a7+z*(a9+z*(a11+z*(a13+z*(a15+z*(a17+z*(a19+z*(a21+z*(a23+z*(a25+z*(a27+z*(a29+z*(a31+z*(a31+z*a35)))))))))))))))));

		return res;
    }

	// cos function
    float cos(float x) {
    	Utility f = new Utility();
    	float tmp = x;
		float a0 = 1.0; //1
		float a2 = -0.5; //2
		float a4 = 0.0416666666666667; //3
		float a6 =  -0.00138888888888889; //4
		float a8 = 0.0000248015873015873; //5
		float a10 = -0.000000275573192239859; //6
		float a12 = 0.00000000208767569878681; //7
		float a14 = -0.0000000000114707455977297; //8
		/*
		float a16 = 0.0000000000000477947733238739; //9
		float a18 = -0.000000000000000156192069685862; //10
		float a20 = 0.0000000000000000000411031762331216; //11
		float a22 = -0.000000000000000000000889679139245057; //12
		float a24 = 0.00000000000000000000000161173757109612; //13
		float a26 = -0.0000000000000000000000000024795962632248; //14
		float a28 = 0.00000000000000000000000000000327988923706984; //15
		float a30 = -0.000000000000000000000000000000000376998762881591; //16
		float a32 = 0.00000000000000000000000000000000000380039075485474; //17
		float a34 = -0.00000000000000000000000000000000000000338715753552116; //18
		*/
		float a16 = 0.0;
        float a18 = 0.0;
        float a20 = 0.0;
        float a22 = 0.0;
        float a24 = 0.0;
        float a26 = 0.0;
        float a28 = 0.0;
        float a30 = 0.0;
        float a32 = 0.0;
        float a34 = 0.0;
		float z;
		float res;

		if (tmp > f.pi){
			tmp = f.bound(x);
		}

		if (tmp < -(f.pi)){
			tmp = f.bound(x);
		}

		z = tmp*tmp;
		res = a0+z*(a2+z*(a4+z*(a6+z*(a8+z*(a10+z*(a12+z*(a14+z*(a16+z*(a18+z*(a20+z*(a22+z*(a24+z*(a26+z*(a28+z*(a30+z*(a32+z*a34))))))))))))))));

        return res;
    }

    void error() asm("ERROR");

	// asin function
    float asin(float x) {
        Utility u = new Utility();
        float tmp;
        float res;
    	if (x < -1.0 || x > 1.0) {
			println("The number given as parameter of asin() is outside [-1,1]");
			error();
		}
		tmp = u.sqrt(1-x*x);
    	res = this.atan(x/tmp);
    	return res;
    }

	// ulp function
    float ulp(float x) {

    	float tmp;
    	float val_min = 0.00000000000000000000000000000000000001175494351;

    	int exp = -127;
    	float puiss_2 = 0.00000000000000000000000000000000000001175494351;

    	float res = 0.00000000000000000000000000000000000001175494351; //init à val min
    	int k = -125;
    	int i = 1;

		tmp = x;

		if(tmp < 0){
			tmp = -tmp;
		}

		if(tmp == 0){
			return val_min;
		}

    	//trouver l'exposant:
    	while (puiss_2 < tmp){
    		puiss_2 = puiss_2 * 2; //faire un SHL
    		exp = exp + 1;
    	}

    	puiss_2 = puiss_2 / 2; //faire un SHR

    	if (exp == 128) { //on a l'infini
    		res = tmp;
    	}
    	if (exp == -127) { //on a 0
    	}

    	exp = exp - 23;

    	if (exp >= -126) {
    		while (k <= exp) { //calcul de la puissance de 2
    			res = res*2; //faire SHR
    			k = k + 1;
    		}
    	}

    	if (exp < -126) {
    		res = 1;
    		k = exp - 103;
    		while (i <= k){
    			res = res/2; //faire SHL
    			i = i + 1;
    		}
    	}
    	return res;
    }




	float atan(float f) {
		float x = 1;
        float z = 0;
        float t = 1;
        float x1;
        float y = f;
        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 0.7853981633974483;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 0.7853981633974483;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 0.4636476090008061;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 0.4636476090008061;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 0.24497866312686414;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 0.24497866312686414;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 0.12435499454676144;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 0.12435499454676144;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 0.06241880999595735;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 0.06241880999595735;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 0.031239833430268277;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 0.031239833430268277;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 0.015623728620476831;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 0.015623728620476831;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 0.007812341060101111;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 0.007812341060101111;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 0.0039062301319669718;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 0.0039062301319669718;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 0.0019531225164788188;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 0.0019531225164788188;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 0.0009765621895593195;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 0.0009765621895593195;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 0.0004882812111948983;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 0.0004882812111948983;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 0.00024414062014936177;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 0.00024414062014936177;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 0.00012207031189367021;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 0.00012207031189367021;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 6.103515617420877*0.00001;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 6.103515617420877*0.00001;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 3.0517578115526096*0.00001;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 3.0517578115526096*0.00001;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 1.5258789061315762*0.00001;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 1.5258789061315762*0.00001;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 7.62939453110197*0.000001;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 7.62939453110197*0.000001;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 3.814697265606496*0.000001;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 3.814697265606496*0.000001;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 1.907348632810187*0.000001;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 1.907348632810187*0.000001;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 9.536743164059608*0.0000001;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 9.536743164059608*0.0000001;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 4.7683715820308884*0.0000001;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 4.7683715820308884*0.0000001;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 2.3841857910155797*0.0000001;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 2.3841857910155797*0.0000001;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 1.1920928955078068*0.0000001;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 1.1920928955078068*0.0000001;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 5.960464477539055*0.00000001;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 5.960464477539055*0.00000001;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 2.9802322387695303*0.00000001;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 2.9802322387695303*0.00000001;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 1.4901161193847655*0.00000001;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 1.4901161193847655*0.00000001;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 7.450580596923828*0.000000001;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 7.450580596923828*0.000000001;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 3.725290298461914*0.000000001;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 3.725290298461914*0.000000001;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 1.862645149230957*0.000000001;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 1.862645149230957*0.000000001;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 9.313225746154785*0.0000000001;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 9.313225746154785*0.0000000001;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 4.656612873077393*0.0000000001;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 4.656612873077393*0.0000000001;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 2.3283064365386963*0.0000000001;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 2.3283064365386963*0.0000000001;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 1.1641532182693481*0.0000000001;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 1.1641532182693481*0.0000000001;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 5.820766091346741*0.00000000001;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 5.820766091346741*0.00000000001;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 2.9103830456733704*0.00000000001;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 2.9103830456733704*0.00000000001;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 1.4551915228366852*0.00000000001;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 1.4551915228366852*0.00000000001;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 7.275957614183426*0.000000000001;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 7.275957614183426*0.000000000001;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 3.637978807091713*0.000000000001;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 3.637978807091713*0.000000000001;
        }
        x = x1;
        t = t/2.0;

        x1 = 0.0;
        if (y < 0){
            x1 = x - y*t;
            y = y + x*t;
            z = z - 1.8189894035458565*0.000000000001;
        } else if (true) {
            x1 = x + y*t;
            y = y - x*t;
            z = z + 1.8189894035458565*0.000000000001;
        }
        x = x1;
        t = t/2.0;

        return z;
	}
}


// End of Deca Math library
